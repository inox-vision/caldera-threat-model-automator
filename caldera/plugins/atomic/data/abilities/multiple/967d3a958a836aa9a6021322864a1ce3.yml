- description: "Uses the undocumented NtQueueAPCThreadEx WinAPI to create a \"Special\
    \ User APC\" in the current thread of the current process to execute shellcode.\
    \ \nSince the shellcode is loaded and executed in the current process it is considered\
    \ local shellcode execution.\n\nSteps taken with this technique\n1. Allocate memory\
    \ for the shellcode with VirtualAlloc setting the page permissions to Read/Write\n\
    2. Use the RtlCopyMemory macro to copy the shellcode to the allocated memory space\n\
    3. Change the memory page permissions to Execute/Read with VirtualProtect\n4.\
    \ Get a handle to the current thread\n5. Execute the shellcode in the current\
    \ thread by creating a Special User APC through the NtQueueApcThreadEx function\n\
    \n- PoC Credit: (https://github.com/Ne0nd0g/go-shellcode/tree/master#rtlcreateuserthread)\n\
    - References:\n  - https://repnz.github.io/posts/apc/user-apc/\n  - https://docs.rs/ntapi/0.3.1/ntapi/ntpsapi/fn.NtQueueApcThreadEx.html\n\
    \  - https://0x00sec.org/t/process-injection-apc-injection/24608\n  - https://twitter.com/aionescu/status/992264290924032005\n\
    \  - http://www.opening-windows.com/techart_windows_vista_apc_internals2.htm#_Toc229652505\n"
  id: 967d3a958a836aa9a6021322864a1ce3
  name: Remote Process Injection with Go using NtQueueApcThreadEx WinAPI
  platforms:
    windows:
      psh:
        cleanup: Stop-Process -Name CalculatorApp -ErrorAction SilentlyContinue
        command: 07821d_NtQueueApcThreadEx.exe -debug
        parsers:
          plugins.atomic.app.parsers.atomic_powershell:
          - source: validate_me
        payloads:
        - 07821d_NtQueueApcThreadEx.exe
  tactic: multiple
  technique:
    attack_id: T1055.004
    name: 'Process Injection: Asynchronous Procedure Call'
