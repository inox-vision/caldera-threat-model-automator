- description: "Create a random atr-nnnnnnnn account and add it to a domain group\
    \ (by default, Domain Admins). \n\nThe quickest way to run it is against a domain\
    \ controller, using `-Session` of `Invoke-AtomicTest`. Alternatively,\nyou need\
    \ to install PS Module ActiveDirectory (in prereqs) and run the script with appropriare\
    \ AD privileges to \ncreate the user and alter the group. Automatic installation\
    \ of the dependency requires an elevated session, \nand is unlikely to work with\
    \ Powershell Core (untested).\n\nIf you consider running this test against a production\
    \ Active Directory, the good practise is to create a dedicated\nservice account\
    \ whose delegation is given onto a dedicated OU for user creation and deletion,\
    \ as well as delegated\nas group manager of the target group.\n\nExample: `Invoke-AtomicTest\
    \ -Session $session 'T1098' -TestNames \"Domain Account and Group Manipulate\"\
    \ -InputArgs @{\"group\" = \"DNSAdmins\" }`\n"
  id: b3aef1cccb10fc2ecf00bc80646ef8fe
  name: Domain Account and Group Manipulate
  platforms:
    windows:
      psh:
        cleanup: Get-ADUser -LDAPFilter "(&(samaccountname=atr--*)(givenName=Test))"
          | Remove-ADUser -Confirm:$False
        command: Try {;     Import-Module ActiveDirectory -ErrorAction Stop | Out-Null;      ;
          } ; Catch {;     if((Get-CimInstance -ClassName Win32_OperatingSystem).ProductType
          -eq 1) {;   Add-WindowsCapability -Name (Get-WindowsCapability -Name RSAT.ActiveDirectory.DS*
          -Online).Name -Online; } else {;   Install-WindowsFeature RSAT-AD-PowerShell;
          }; };  ;  $x = Get-Random -Minimum 2 -Maximum 99; $y = Get-Random -Minimum
          2 -Maximum 99; $z = Get-Random -Minimum 2 -Maximum 99; $w = Get-Random -Minimum
          2 -Maximum 99; Import-Module ActiveDirectory; $account = "#{account_prefix}-$x$y$z";
          New-ADUser -Name $account -GivenName "Test" -DisplayName $account -SamAccountName
          $account -Surname $account -Enabled:$False; Add-ADGroupMember "#{group}"
          $account
        parsers:
          plugins.atomic.app.parsers.atomic_powershell:
          - source: validate_me
        payloads: []
  tactic: multiple
  technique:
    attack_id: T1098
    name: Account Manipulation
